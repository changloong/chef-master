[<%= node['php']['fpm_pool']['name'] %>]
user = <%= node['php']['fpm_pool']['user'] %>
group = <%= node['php']['fpm_pool']['group'] %>

listen = <%= node['php']['fpm_pool']['listen'] %>
;listen.owner = <%= node['php']['fpm_pool']['user'] %>
;listen.group = <%= node['php']['fpm_pool']['group'] %>
;listen.mode = 0660

; Default Value: no set
; process.priority = -19

; Choose how the process manager will control the number of child processes.
; Possible Values:
;   static  - a fixed number (pm.max_children) of child processes;
;   dynamic - the number of child processes are set dynamically based on the
;             following directives. With this process management, there will be
;             always at least 1 children.
;             pm.max_children      - the maximum number of children that can
;                                    be alive at the same time.
;             pm.start_servers     - the number of children created on startup.
;             pm.min_spare_servers - the minimum number of children in 'idle'
;                                    state (waiting to process). If the number
;                                    of 'idle' processes is less than this
;                                    number then some children will be created.
;             pm.max_spare_servers - the maximum number of children in 'idle'
;                                    state (waiting to process). If the number
;                                    of 'idle' processes is greater than this
;                                    number then some children will be killed.
;  ondemand - no children are created at startup. Children will be forked when
;             new requests will connect. The following parameter are used:
;             pm.max_children           - the maximum number of children that
;                                         can be alive at the same time.
;             pm.process_idle_timeout   - The number of seconds after which
;                                         an idle process will be killed.
; Note: This value is mandatory.
pm =  <%= node['php']['fpm_pool']['pm'] %>

; The number of child processes to be created when pm is set to 'static' and the
; maximum number of child processes when pm is set to 'dynamic' or 'ondemand'.
; This value sets the limit on the number of simultaneous requests that will be
; served. Equivalent to the ApacheMaxClients directive with mpm_prefork.
; Equivalent to the PHP_FCGI_CHILDREN environment variable in the original PHP
; CGI. The below defaults are based on a server without much resources. Don't
; forget to tweak pm.* to fit your needs.
; Note: Used when pm is set to 'static', 'dynamic' or 'ondemand'
; Note: This value is mandatory.
pm.max_children = <%= node['php']['fpm_pool']['max_children'] %>

; The number of child processes created on startup.
; Note: Used only when pm is set to 'dynamic'
; Default Value: min_spare_servers + (max_spare_servers - min_spare_servers) / 2
pm.start_servers = <%= node['php']['fpm_pool']['start_servers'] %>

; The desired minimum number of idle server processes.
; Note: Used only when pm is set to 'dynamic'
; Note: Mandatory when pm is set to 'dynamic'
pm.min_spare_servers = <%= node['php']['fpm_pool']['min_spare_servers'] %>

; The desired maximum number of idle server processes.
; Note: Used only when pm is set to 'dynamic'
; Note: Mandatory when pm is set to 'dynamic'
pm.max_spare_servers = <%= node['php']['fpm_pool']['max_spare_servers'] %>

; The number of seconds after which an idle process will be killed.
; Note: Used only when pm is set to 'ondemand'
; Default Value: 10s
pm.process_idle_timeout = <%= node['php']['fpm_pool']['process_idle_timeout'] %>

; The number of requests each child process should execute before respawning.
; This can be useful to work around memory leaks in 3rd party libraries. For
; endless request processing specify '0'. Equivalent to PHP_FCGI_MAX_REQUESTS.
; Default Value: 0
pm.max_requests = <%= node['php']['fpm_pool']['max_requests'] %>

; Default Value: not set
;pm.status_path = /status

; Default Value: not set
;ping.path = /ping

; Default Value: pong
;ping.response = pong

; Default: not set
access.log = <%= node['php']['fpm_log_dir'] %>/fpm_pool_<%= node['php']['fpm_pool']['name'] %>.access.log

; Default: "%R - %u %t \"%m %r\" %s"
;access.format = "%R - %u %t \"%m %r%Q%q\" %s %f %{mili}d %{kilo}M %C%%"

; Default Value: not set
; Note: slowlog is mandatory if request_slowlog_timeout is set

slowlog = <%= node['php']['fpm_log_dir'] %>/fpm_pool_<%= node['php']['fpm_pool']['name'] %>.slow.low

; Default Value: 0
request_slowlog_timeout = <%= node['php']['fpm_pool']['request_slowlog_timeout'] %>

; Default Value: 0
request_terminate_timeout = <%= node['php']['fpm_pool']['request_terminate_timeout'] %>

; Default Value: system defined value
rlimit_files =  <%= node['php']['fpm_pool']['rlimit_files'] %>

; Default Value: system defined value
rlimit_core = <%= node['php']['fpm_pool']['rlimit_core'] %>

; Default Value: no
;catch_workers_output = yes

; Default Value: yes
clear_env = <%= node['php']['fpm_pool']['clear_env'] %>

; Default Value: .php
security.limit_extensions = <%= node['php']['fpm_pool']['limit_extensions'] %>

; Pass environment variables like LD_LIBRARY_PATH. All $VARIABLEs are taken from
; the current environment.
; Default Value: clean env
;env[HOSTNAME] = $HOSTNAME
<% node['php']['fpm_pool']['env'].each do |env_name,env_value| %>
env[<%= env_name %>] = <%= env_value %>
<% end %>


; Default Value: nothing is defined by default except the values in php.ini and
;                specified at startup with the -d argument
php_admin_value[sendmail_path] = <%= node['php']['fpm_pool']['sendmail_path'] %>
php_flag[display_errors] = <%= node['php']['fpm_pool']['display_errors'] %>
php_admin_value[error_log] = <%= node['php']['fpm_log_dir'] %>/fpm_pool_<%= node['php']['fpm_pool']['name'] %>.error.low
php_admin_flag[log_errors] = <%= node['php']['fpm_pool']['log_errors'] %>
php_admin_value[memory_limit] = <%= node['php']['fpm_pool']['memory_limit'] %>
